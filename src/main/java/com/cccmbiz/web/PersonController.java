package com.cccmbiz.web;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.*;

/**
 * Handles requests for the Employee service.
 */
@Controller
public class PersonController {
	
	private static final Logger logger = LoggerFactory.getLogger(PersonController.class);
	
	//Map to store employees, ideally we should use database
	Map<Integer, Person> empData = new HashMap<>();

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private PersonRepository personRepository;
	
	@RequestMapping(value = PersonRestURIConstants.DUMMY_EMP, method = RequestMethod.GET)
	public @ResponseBody Person getDummyEmployee() {
		logger.info("Start getDummyEmployee");
		Person emp = new Person();
		emp.setPersonId(9999);
		emp.setFirstName("Dummy");
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		emp.setAcceptedChristDate(timestamp);
		empData.put(9999, emp);
		return emp;
	}
	
	@RequestMapping(value = PersonRestURIConstants.GET_EMP, method = RequestMethod.GET)
	public @ResponseBody Optional<Person> getPerson(@PathVariable("id") int personId) {
		logger.info("Start getPerson. ID="+personId);
		
		return personRepository.findById(personId);
	}
	
	@RequestMapping(value = PersonRestURIConstants.GET_ALL_EMP, method = RequestMethod.GET)
	public @ResponseBody Iterable<Person> getAllPersons() {
		// This returns a JSON or XML with the users
		return personRepository.findAll();
	}
	
	@RequestMapping(value = PersonRestURIConstants.CREATE_EMP, method = RequestMethod.POST)
	public @ResponseBody Person createEmployee(@RequestBody Person emp) {
		logger.info("Start createEmployee.");
		Timestamp timestamp = new Timestamp(System.currentTimeMillis());
		emp.setAcceptedChristDate(timestamp);
		empData.put(emp.getPersonId(), emp);
		return emp;
	}
	
	@RequestMapping(value = PersonRestURIConstants.DELETE_EMP, method = RequestMethod.PUT)
	public @ResponseBody Person deleteEmployee(@PathVariable("id") int personId) {
		logger.info("Start deleteEmployee.");
		Optional<Person> person = personRepository.findById(personId);
		personRepository.delete(person.get());
		return person.get();
	}
	
}
